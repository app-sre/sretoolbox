[project]
name = "sretoolbox"
version = "2.6.0"
requires-python = " >=3.9"
description = "Code Generator for GraphQL Query and Fragment Data Classes"
readme = "README.md"
license = { text = "Apache 2.0" }

authors = [
    { name = "Red Hat Application SRE Team", email = "sd-app-sre@redhat.com" },
]
dependencies = [
    "python-json-logger ~=2.0.7",
    "requests ~=2.32.3",
    "semver ~=3.0.2",
]


[project.urls]
homepage = "https://github.com/app-sre/sretoolbox"
repository = "https://github.com/app-sre/sretoolbox"
documentation = "https://github.com/app-sre/sretoolbox"

[dependency-groups]
dev = [
    "pytest ~=8.3.3",
    "pytest-cov ~=6.0.0",
    "pytest-xdist ~=3.6.1",
    "requests-mock ~=1.12.1",
    "ruff ~=0.8",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
only-include = ["sretoolbox"]

[tool.hatch.build.targets.wheel]
only-include = ["sretoolbox"]

# Ruff configuration
[tool.ruff]
target-version = 'py39'
line-length = 88
src = ["sretoolbox", "tests"]
extend-exclude = [
    # exclude some common cache and tmp directories
    ".local",
    ".cache",
    "tmp",
    "demo",
]
fix = true

[tool.ruff.lint]
preview = true
select = ["ALL"]
ignore = [
    "CPY",     # Missing copyright header
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D203",    # 1 blank line required before class docstring
    "D211",    # No blank lines allowed before class docstring
    "D212",    # multi-line-summary-first-line
    "D213",    # multi-line-summary-second-line
    "D4",      # Doc string style
    "E501",    # Line too long
    "G004",    # Logging statement uses f-string
    "PD011",   # use to_numpy()
    "PLR0904", # Too many public methods
    "PLR0913", # Too many arguments
    "PLR0917", # Too many positional arguments
    "S101",    # Use of assert detected. Pytest uses assert
    "S404",    # subprocess import
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # try-consider-else
    # pydoclint
    "DOC",
    # May conflict with the formatter, https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q",
    "COM812",
    "COM819",
    "ISC001",
    # Room for future improvements and refactoring
    "ANN",     # Missing annotation
    "PT",      # Use PyTest stuff instead unittest
    "RUF012",  # need type annotations
    "B017",    # `assertRaises(Exception)` should be considered evil
    "PLR6301", # Method `xxx` could be a function, class method, or static method
    "FBT002",  # boolean parameter should be a keyword argument
    "PLR2004", # magic value instead of constant
    "PTH",     # Prefer Path.xxx over os.xxx
    "TC003",   # use TYPE_CHECKING
]
[tool.ruff.format]
preview = true

[tool.ruff.lint.isort]
known-first-party = ["sretoolbox"]

[tool.coverage.report]
fail_under = 80
